





LAB MANUAL
MICROPROCESSOR  LAB (8086)














Experiment No 1 : Arithmetic Operations 
Qs . :  
	Write an ALP to perform arithmetic operations for 8 bit and 16 bit.


Aim :
           To   write an ALP to implement Addition , Subtraction ,Multiplication and Division of two 8 bit and 16 bit numbers.
Algorithm : 
Start the program .
Declare the assembler directives.	
Declare the variables .
Get the data into data segment.
Start the program by loading the first data into a register.
Move the next data into another register. 
Perform the necessary operation (Addition ,Subtraction ,Division ,Multiplication) using appropriate instructions.
Store the data in the accumulator.
Display the output in the register. 
Terminate the program 
Programs :
8 bit addition
.model small
.data
var1 dB 08H
var2 dB 09H
.code
start:
	MOV BX,@data
	MOV dS,BX
                MOV AL,var1
	MOV CL,var2
	ADD Al,CL
	int 03H
	end


8 bit Subraction
.model small
.data
var1 dB 08H
var2 dB 09H
.code
start:
	MOV BX,@data
	MOV dS,BX
                MOV AL,var1
	MOV CL,var2
	SUB Al,CL
	int 03H
	end


8 bit Multipication :
.model small
.data
var1 dB 08H
var2 dB 09H
.code
start:
	MOV BX,@data
	MOV dS,BX
                MOV AL,var1
	MOV CL,var2
	MUL CL
	int 03H
end


8 bit Division
.model small
.data
var1 dB 08H
var2 dB 09H
.code
start:
	MOV BX,@data
	MOV dS,BX
                MOV AL,var1
	MOV CL,var2
	DIV CL
	int 03H
end


16 bit Addition
.model small
.data
var1 dw 1111H
var2 dw 1011H
.code
start:
	MOV BX,@data
	MOV dS,BX
             MOV Ax,var1
	MOV Cx,var2
	SUB AX,CX
	int 03H
end


16  bit Subtraction 
.model small
.data
var1 dw 1111H
var2 dw 1011H
.code
start:
	MOV BX,@data
	MOV dS,BX
              MOV Ax,var1
	MOV Cx,var2
             ADD AX,CX
	int 03H
end


16  bit Multiplication 
.model small
.data
var1 dw 1111H
var2 dw 1011H
.code
start:
	MOV BX,@data
	MOV dS,BX
              MOV Ax,var1
	MOV Cx,var2
              MUL CX
	int 03H
end


16  bit Division 
.model small
.data
var1dw 1111H
var2dw 1011H
.code
start:
	MOV BX,@data
	MOV dS,BX
              MOV Ax,var1
	MOV Cx,var2
              DIV CX
	int 03H
end


Conclusion:
	Thus, all the operation were performed for 8 bit and 16 bit values.
Experiment No 2 : SWAPPING TWO NUMBERS 


Qs . :  
        Write an ALP to perform swapping of two numbers.


Aim :
           To write an ALP to swap two number using registers.


Algorithm : 
Start the program.
Declare the assembler directives.	
Declare the variables.
Get the data into data segment.
Start the program by loading the first data into a register.
Move the next data into another register. 
Swap the values among the registers.
Store the values after swapping.
Display the output in the register. 
Terminate the program ,
Programs :
.model small
.data
   	num1 db 04h
  	 num2 db 03h
.code
 start:
    	mov bx,@data
    	mov ds,bx
   	 mov al,num1
  	 mov cl,num2
   	mov dl,al
  	 mov al,cl
  	 mov cl,dl
 	  int 03h
 end


Conclusion :


           Thus , the swapping of two numbers is studied and implemented.






Experiment No 3 : Factorial Of A Number


Qs . :  
        Write an ALP to perform factorial. 


Aim :
           To  write an ALP for performing the factorial of a given number. 


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare the variable .
Get the data into data segment.
Decrement the number .
Keep multiplying with the previous number.
Compare until the last number is 1.
Repeat Step 5 and Step 6 until Step 7 is satisfied.
Display the output in the register. 
Terminate the program 
Programs :
.model small
.data
 	num1 db 05h
.code
 start:
  	mov bx,@data
  	mov ds,bx
  	mov al,num1
  	c1: DEC num1
  		MUL num1
 		 mov dl,num1
  		CMP dl,01
 	 JNZ c1
 	 int 03h
  end


Conclusion :
Thus , the factorial of a number was implemented and studied.


Experiment No 4 :Fibonacci Series.
Qs . :  
       Write an ALP to generate Fibonacci Series. 


Aim :
           To write an ALP for performing the Fibonacci series of a given number. 


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare the counter value .
Initialize the starting values as 0 and 1. 
Keep on adding the value and store it in accumulator.
Add the next value with the accumulator . 
Perform swapping to add up the previous data along with the next data.
Keep on decrementing the counter value until its 0.
Repeat Step 5 to Step 7 until Step 8 is satisfied.
Display the output in the register. 
Terminate the program 
Programs :
.model small
.data
.code
.start:
mov al,00h
mov dl,00h
mov cl,05h
mov bl,01h
c1: add al,bl
                     mov dl,al
                    mov al,bl
                    mov bl,dl
 	     dec cl
jnz c1
int 03h
end
Conclusion :
	Thus , the fibbonnaci series is generated for the nth number.
Experiment No 5 : 2’s Complement


Qs . :  
        Write an ALP to perform  2’s Complement.
Aim :
           To  write an ALP to find 2’s Complement of a given number. 


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare the variable .
Get the data into data segment.
Move the data into accumulator.
Perform 1’s complement and store the data into accumulator.
Add 1 to the data stored in accumulator.
Display the output in the register. 
Terminate the program 
Programs :
.model small
.data
	num1 dw 0002H
.CODE
START:
MOV bX,@DATA
	MOV dS,bX
	MOV AX,Num1
	NOT AX
	ADD AX,0001H
	INT 03H


END


Conclusion :


	Thus , for the given number 2’s complement was found out. 












Experiment No 6 : Transfer block of Data
Qs . :  
        Write an ALP to transfer of data block.
Aim :
           To  write an ALP to that transfers block of data from Source Index to Destination Index . 


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare the list which consist data denoted as block1.
Get the data into data segment.
Declare extra segment which consist of another empty block .
Load the effective address of the block1 to source index [SI].
Load the effective address of the block2 to destination index[DI].
Clear the direction flag so that auto increment of SI and DI takes place.
Repeatedly keep moving until all the values of SI are moved to DI.
Display the output in the register. 
Terminate the program 
Programs :
.model small
.data 
	block1 db 1,2,3,4,5,6,7,8,9,10h
	extra segment
	block2 db  10 dup(0)
.code
start:
	mov bx,@data
	mov ds,bx
	mov ax,extra
	mov es,ax
	lea si,block1
	lea di,block2
	mov cx,10h
	cld	
	rep movsb
	int 03h
end
Conclusion 
	Thus , transferring  block of data from source to destination was implemented .
Experiment No 7 : Maximum and Minimum Number.


Qs . :  
        Write an ALP to find minimum and maximum number.


Aim :
           To write an ALP in order to find the minimum and maximum number from the given list.


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare the variable .
Declare the list which consist random values.
Get the data into data segment.
Load the effective address in a register .
Declare a pointer and point it to that register.
Set the counter value based on the values stored in the list.
Start comparing the values among themselves .
If no carry is generated then  smallest number is obtained.
If carry is generated then largest number is obtained.
Decrement the counter register and compare until count value becomes 0.
Repeat steps 8 to 11 until step 12 is obtained.
Display the output in the register. 
Terminate the program 
Programs :


.model small
.data
    	A dw 1h,2h,3h,4h,5h,6h
.code
 start:
    	mov ax,@data
   	 mov ds,ax
   	mov cl,06h
   	 lea bx,A
   	mov Dx,word PTR[bx]
   	 mov ax,0000h
    	n1:cmp ax,word PTR[bx]
     	      jnc n2
   	      mov ax,word PTR[bx]
   	 n2:cmp dx,word PTR[bx]
     	       jc n3
      	      mov dx,word PTR[bx]
    	n3:add bx,02
      	dec cl
      	cmp cl,00h
      	jnz n1
      	int 03h
end


Conclusion: 
	
	Thus , transferring  block of data was implemented .












                   




















































Experiment No 8 :Display A-Z characters 


Qs . :  
       Write an ALP to display A to Z characters.


Aim :
           To write an ALP that displays A to Z characters.


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare a macro that can be used in program.
Macro is used to get the data from keyboard and display it.
Move the first data into accumulator. 
Set the counter value. 
Keep on incrementing accumulator value.
Decrement the counter value until it becomes zero.
Display the output in the screen. 
Terminate the program 
Programs :
.model small
 	disp macro char
      		mov ah,02h
      		mov dl,char
      		Int 21h
  	endm
.data
.code
.startup
    	mov al,'a'
    	mov cl,26
    	print:disp al
    	          inc al
   	loop print
  	 mov ah,04h
  	int 21h
.exit
End


Conclusion :
	Thus , all the A to Z character’s were displayed.
Experiment No 8 :Palindrome 


Qs . :  
       Write an ALP to check the string is palindrome or not.


Aim :
           To write an ALP to reverse a string and then compare it whether its palindrome or not.


Algorithm : 
Start the program .
Declare the assembler directives.	
Declare a macro that can be used in program.
Macro1 is used to print the string .
Macro2 is used to copy the string .
Push the given string in a stack.
Pop up the reverse string. 
Keep comparing the data along with the original string. 
Display the output in the screen. 
Terminate the program 
Programs :
.model small 
  	print macro p
      		lea dx,p
      		mov ah,09h
      		int 21h
   	endm
	 copy macro q
      		lea dx,q
     		 mov ah,0ah
     		 int 21h
  	 endm
.data
	a db 20h dup("$")
	b db 20h dup("$")
	d db 0ah,0dh,("$")
	e db "enter the string $"
	f db "reverse the string $"
	g db "String is palindrome $"
	h db "String is not a palindrome $"
.code
.startup 
	print e
	print d
	copy a
	print d
	print f
	print d
	lea si,a
	lea di,b
	inc si
	mov dl,[si]
	mov dh,00h
	add si,dx
	mov cx,dx
	push cx
  l1:
	mov bh,[si]
	mov [di],bh
	inc di
	dec si
 	loop l1
	print b
	lea di,b
	lea si,a
	inc si
	inc si
	pop cx
  l2: 
	mov bh,[si]
	cmp bh,[di]
	jne l3
 	inc si
	inc di
	loop l2
 	print d
	 print g
 	jmp l4
  l3: 
 	print d
 	print h
  l4:
 	.exit
	end 
	 int 21h
.exit
End


Conclusion :
	
	 Thus ,the string was reversed and compared to check whether its palindrome or not.




























































Experiment No 10 :Square Of A Number
 
Qs . :  
       Write an ALP to find square of a number.


Aim :
           To write an ALP that finds the square of a number.
 
Algorithm : 
Start the program.
Declare the assembler directives.	
The input is taken as the counter value.
Move the data into accumulator. 
Keep on adding the data based on the counter values.
Keep on incrementing accumulator value.
Perform Decimal Adjust Addition  that keeps on updating flags.
Decrement the counter value until it becomes zero.
Display the output in the register. 
Terminate the program 
Programs :
.model small
.data
.code
start:
	mov bx,04h
	mov ax,00h
	mov cx,bx
l1:
	add ax,bx
	daa
	loop l1
	int 03h
end


Conclusion :
	
	Thus ,square of a number was calculated.


